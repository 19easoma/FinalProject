import java.util.Random;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author antho
 */
public class DungeonMenu extends javax.swing.JFrame {
    
    Random monsterRoll = new Random();
    Random bossRoll = new Random();
    
    int count = 0;
    
    int monsterDefenseCheck;
    int playerDefenseCheck;
    /**
     * Creates new form FightMenu
     */
    public DungeonMenu() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        grpPotionSelect = new javax.swing.ButtonGroup();
        btnCloseDungeon = new javax.swing.JButton();
        prgPlayerHealth = new javax.swing.JProgressBar();
        prgEnemyHealth = new javax.swing.JProgressBar();
        lblPlayerHealth = new javax.swing.JLabel();
        lblEnemyHealth = new javax.swing.JLabel();
        btnAttack = new javax.swing.JButton();
        rdPotion = new javax.swing.JRadioButton();
        rdMegaPotion = new javax.swing.JRadioButton();
        rdMaxPotion = new javax.swing.JRadioButton();
        btnHeal = new javax.swing.JButton();
        btnStartBattle = new javax.swing.JButton();
        lblPlayerName = new javax.swing.JLabel();
        lblEnemyName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaAttackMessage = new javax.swing.JTextArea();
        btnContinue = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        lblPotionsHeld = new javax.swing.JLabel();
        lblMegaPotionsHeld = new javax.swing.JLabel();
        lblMaxPotionsHeld = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);

        btnCloseDungeon.setText("Close");
        btnCloseDungeon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseDungeonActionPerformed(evt);
            }
        });

        prgPlayerHealth.setForeground(new java.awt.Color(0, 255, 0));
        prgPlayerHealth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        prgPlayerHealth.setOpaque(true);
        prgPlayerHealth.setString("10%");

        prgEnemyHealth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        prgEnemyHealth.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblPlayerHealth.setText("Health: " + Player.getCurrentVitality() + " / " + Player.getMaxVitality());

        lblEnemyHealth.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblEnemyHealth.setText("Health: " + Monster.getCurrentVitality() + " / " + Monster.getMaxVitality());

        btnAttack.setBackground(new java.awt.Color(255, 153, 153));
        btnAttack.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAttack.setText("Attack");
        btnAttack.setEnabled(false);
        btnAttack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttackActionPerformed(evt);
            }
        });

        grpPotionSelect.add(rdPotion);
        rdPotion.setText("Potion");

        grpPotionSelect.add(rdMegaPotion);
        rdMegaPotion.setText("Mega Potion");

        grpPotionSelect.add(rdMaxPotion);
        rdMaxPotion.setText("Max Potion");

        btnHeal.setBackground(new java.awt.Color(153, 255, 153));
        btnHeal.setText("Heal");
        btnHeal.setEnabled(false);
        btnHeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHealActionPerformed(evt);
            }
        });

        btnStartBattle.setText("Start");
        btnStartBattle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartBattleActionPerformed(evt);
            }
        });

        lblPlayerName.setText(Global.getPlayerName());

        lblEnemyName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblEnemyName.setText(Monster.getMonsterName());

        areaAttackMessage.setColumns(20);
        areaAttackMessage.setLineWrap(true);
        areaAttackMessage.setRows(5);
        areaAttackMessage.setWrapStyleWord(true);
        jScrollPane1.setViewportView(areaAttackMessage);

        btnContinue.setText("Continue");
        btnContinue.setEnabled(false);
        btnContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContinueActionPerformed(evt);
            }
        });

        btnReturn.setText("Return");
        btnReturn.setEnabled(false);
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        lblPotionsHeld.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblPotionsHeld.setText("Held: " + Player.getPotionsHeld());

        lblMegaPotionsHeld.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblMegaPotionsHeld.setText("Held: " + Player.getMegaPotionsHeld());

        lblMaxPotionsHeld.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblMaxPotionsHeld.setText("Held: " + Player.getMaxPotionsHeld());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPlayerName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblEnemyName))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPlayerHealth)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(prgPlayerHealth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rdMaxPotion)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblMaxPotionsHeld))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rdMegaPotion)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblMegaPotionsHeld))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rdPotion)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblPotionsHeld))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, Short.MAX_VALUE)
                                        .addComponent(btnContinue, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnHeal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAttack, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnStartBattle, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCloseDungeon, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEnemyHealth, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(prgEnemyHealth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(57, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPlayerName)
                            .addComponent(lblEnemyName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(prgPlayerHealth, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prgEnemyHealth, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnStartBattle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPlayerHealth)
                    .addComponent(lblEnemyHealth))
                .addGap(2, 2, 2)
                .addComponent(btnAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdPotion)
                            .addComponent(lblPotionsHeld))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdMegaPotion)
                            .addComponent(lblMegaPotionsHeld))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdMaxPotion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblMaxPotionsHeld))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHeal, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReturn)
                            .addComponent(btnContinue)))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(btnCloseDungeon))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseDungeonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseDungeonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCloseDungeonActionPerformed

    private void btnStartBattleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartBattleActionPerformed
        // TODO add your handling code here:
        areaAttackMessage.setText("");
        btnContinue.setEnabled(false);
        
        int newMonster = monsterRoll.nextInt(25);
        
        // randomly generates new monster
        switch (newMonster) {
            case 0:
                Monster monsterGoblin = new Monster("Goblin",42 + Player.getBossCount() * 8,42 + Player.getBossCount() * 8,16,16,9 + Player.getBossCount() * 2,4 + Player.getBossCount());
                break;
            case 1:
                Monster monsterSkeleton = new Monster("Skeleton Swordsman",38 + Player.getBossCount() * 8,38 + Player.getBossCount() * 8,24,10,14 + Player.getBossCount() * 2,2 + Player.getBossCount());
                break;
            case 2:
                Monster monsterKobold = new Monster("Kobold",42 + Player.getBossCount() * 8,42 + Player.getBossCount() * 8,16,12,11 + Player.getBossCount() * 2,3 + Player.getBossCount());
                break;
            case 3:
                Monster monsterSlime = new Monster("Slime",60 + Player.getBossCount() * 8,60 + Player.getBossCount() * 8,16,20,6 + Player.getBossCount() * 2,8 + Player.getBossCount());
                break;
            case 4:
                Monster monsterForestSpirit = new Monster("Forest Spirit",20 + Player.getBossCount() * 8,20 + Player.getBossCount() * 8,26,8,8 + Player.getBossCount() * 2,18 + Player.getBossCount());
                break;       
            case 5:
                Monster monsterGoldSlime = new Monster("Gold Slime",10 + Player.getBossCount() * 4,10 + Player.getBossCount() * 4,10,100,5 + Player.getBossCount() * 2,20 + Player.getBossCount());
                break;
            case 6:
                Monster monsterSilverSlime = new Monster("Silver Slime",10 + Player.getBossCount() * 4,10 + Player.getBossCount() * 4,100,10,5 + Player.getBossCount() * 2,20 + Player.getBossCount());
                break;
            case 7:
                Monster monsterSmallEnemySpider = new Monster("Small Enemy Spider",12 + Player.getBossCount() * 8,12 + Player.getBossCount() * 8,4,2,12 + Player.getBossCount() * 2,1 + Player.getBossCount());
                break;
            case 8:
                Monster monsterSkeletonDancer = new Monster("Skeleton Dancer",38 + Player.getBossCount() * 8,38 + Player.getBossCount() * 8,16,10,10 + Player.getBossCount() * 2,4 + Player.getBossCount());
                break;
            case 9:
                Monster monsterTinySkeletonBoy = new Monster("Tiny Skeleton Boy",20 + Player.getBossCount() * 8,20 + Player.getBossCount() * 8,4,4,16 + Player.getBossCount() * 2,1 + Player.getBossCount());
                break; 
            case 10:
                Monster monsterThat = new Monster("Small Rodent Carrying Infectious Disease",18 + Player.getBossCount() * 8,18 + Player.getBossCount() * 8,20,16,18 + Player.getBossCount() * 2,2 + Player.getBossCount());
                break;
            case 11:
                Monster monsterWildBoar = new Monster("Wild Boar",70 + Player.getBossCount() * 8,70 + Player.getBossCount() * 8,30,5,12 + Player.getBossCount() * 2,4 + Player.getBossCount());
                break;
            case 12:
                Monster monsterFlyingSnake = new Monster("Flying Snake",36 + Player.getBossCount() * 8,36 + Player.getBossCount() * 8,18,10,10 + Player.getBossCount() * 2,4 + Player.getBossCount());
                break;
            case 13:
                Monster monsterEnchantedSword = new Monster("Enchanted Sword",50 + Player.getBossCount() * 8,50 + Player.getBossCount() * 8,40,22,20 + Player.getBossCount() * 2,1 + Player.getBossCount());
                break;
            case 14:
                Monster monsterEnchantedShield = new Monster("Enchanted Shield",50 + Player.getBossCount() * 4,50 + Player.getBossCount() * 4,40,22,2 + Player.getBossCount() * 2,14 + Player.getBossCount());
                break; 
            case 15:
                Monster monsterMutatedWaspSwarm = new Monster("Mutated Wasp Swarm",25 + Player.getBossCount() * 8,25 + Player.getBossCount() * 8,26,8,18 + Player.getBossCount() * 2,4 + Player.getBossCount());
                break;
            case 16:
                Monster monsterHauntedKnight = new Monster("Haunted Knight",48 + Player.getBossCount() * 8,48 + Player.getBossCount() * 8,30,30,12 + Player.getBossCount() * 2,8 + Player.getBossCount());
                break;
            case 17:
                Monster monsterBabyManticore = new Monster("Baby Manticore",56 + Player.getBossCount() * 8,56 + Player.getBossCount() * 8,26,16,14 + Player.getBossCount() * 2,6 + Player.getBossCount());
                break;
            case 18:
                Monster monsterStoneConstruct = new Monster("Stone Construct",15 + Player.getBossCount() * 4,15 + Player.getBossCount() * 4,36,40,8 + Player.getBossCount() * 2,22 + Player.getBossCount());
                break;
            case 19:
                Monster monsterLakeSpirit = new Monster("Lake Spirit",40 + Player.getBossCount() * 8,40 + Player.getBossCount() * 8,26,8,10 + Player.getBossCount() * 2,8 + Player.getBossCount());
                break; 
            case 20:
                Monster monsterHillGiant = new Monster("Hill Giant",80 + Player.getBossCount() * 8,80 + Player.getBossCount() * 8,40,36,14 + Player.getBossCount() * 2,6 + Player.getBossCount());
                break;
            case 21:
                Monster monsterBabyWyvern = new Monster("Baby Wyvern",46 + Player.getBossCount() * 8,46 + Player.getBossCount() * 8,26,16,18 + Player.getBossCount() * 2,4 + Player.getBossCount());
                break;
            case 22:
                Monster monsterEnt = new Monster("Ent",60 + Player.getBossCount() * 8,60 + Player.getBossCount() * 8,40,14,6 + Player.getBossCount() * 2,10 + Player.getBossCount());
                break;
            case 23:
                Monster monsterHarpy = new Monster("Harpy",38 + Player.getBossCount() * 8,38 + Player.getBossCount() * 8,26,20,14 + Player.getBossCount() * 2,4 + Player.getBossCount());
                break;
            case 24:
                Monster monsterPhilosophyMajor = new Monster("Philosophy Major",5 + Player.getBossCount() * 2,5 + Player.getBossCount() * 8,50,50,10 + Player.getBossCount() * 2,1000 + Player.getBossCount());
                break; 
        }
        
        lblEnemyName.setText(Monster.getMonsterName());
        lblEnemyHealth.setText("Health: " + Monster.getCurrentVitality() + " / " + Monster.getMaxVitality());
        
        btnAttack.setEnabled(true);
        btnHeal.setEnabled(true);
        
        prgPlayerHealth.setMaximum(Player.getMaxVitality());
        prgPlayerHealth.setValue(Player.getCurrentVitality());
        
        prgEnemyHealth.setMaximum(Monster.getMaxVitality());
        prgEnemyHealth.setValue(Monster.getCurrentVitality());
        
        // spawns a boss after 5 monsters have been defeated
        if (count == 5) {
            JOptionPane.showMessageDialog(null, "You hear a rumble in the distance. A large monster appears!");
            
            int newBoss = bossRoll.nextInt(5);
            
            // randomly generates new boss
            switch (newBoss) {
                case 0:
                    Monster bossWyvern = new Monster("Wyvern",200 + Player.getBossCount() * 8,200 + Player.getBossCount() * 8,100,100,16 + Player.getBossCount() * 2,6 + Player.getBossCount());
                    break;
                case 1:
                    Monster bossCyclopsWithAnEyepatch = new Monster("Cyclops With An Eyepatch",50 + Player.getBossCount() * 8,50 + Player.getBossCount() * 8,100,100,34 + Player.getBossCount() * 2,2 + Player.getBossCount());
                    break;
                case 2:
                    Monster bossManticore = new Monster("Manticore",180 + Player.getBossCount() * 8,180 + Player.getBossCount() * 8,100,100,24 + Player.getBossCount() * 2,4 + Player.getBossCount());
                    break;
                case 3:
                    Monster bossIronGolem = new Monster("Iron Golem",50 + Player.getBossCount() * 8,50 + Player.getBossCount() * 8,100,100,10 + Player.getBossCount() * 2,20 + Player.getBossCount());
                    break;
                case 4:
                    Monster bossGiantEnemySpider = new Monster("Giant Enemy Spider",140 + Player.getBossCount() * 8,140 + Player.getBossCount() * 8,100,100,30 + Player.getBossCount() * 2,4 + Player.getBossCount());
                    break;
            }
            
            lblEnemyName.setText(Monster.getMonsterName());
            lblEnemyHealth.setText("Health: " + Monster.getCurrentVitality() + " / " + Monster.getMaxVitality());
            
            prgEnemyHealth.setMaximum(Monster.getMaxVitality());
            prgEnemyHealth.setValue(Monster.getCurrentVitality());
        }
        
        btnStartBattle.setEnabled(false); 
    }//GEN-LAST:event_btnStartBattleActionPerformed

    private void btnAttackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttackActionPerformed
        // subtracts player and monster defense from each attack
        monsterDefenseCheck = Player.getPower() - Monster.getDefense();
        
        if (monsterDefenseCheck < 1) {
            monsterDefenseCheck = 1;
        }
        
        Monster.setCurrentVitality(Monster.getCurrentVitality() - monsterDefenseCheck);
        prgEnemyHealth.setValue(Monster.getCurrentVitality());
        
        playerDefenseCheck = Monster.getPower() - Player.getDefense();
        
        if (playerDefenseCheck < 1) {
            playerDefenseCheck = 1;
        }
        
        Player.setCurrentVitality(Player.getCurrentVitality() - playerDefenseCheck);
        prgPlayerHealth.setValue(Player.getCurrentVitality());
        
        if (Monster.getCurrentVitality() < 0) {
            Monster.setCurrentVitality(0);
        } else {
            Monster.setCurrentVitality(Monster.getCurrentVitality());
        }
        
        if (Player.getCurrentVitality() < 0) {
                Player.setCurrentVitality(0);
        } else {
            Player.setCurrentVitality(Player.getCurrentVitality());
        }
        
        btnHeal.setEnabled(true);
        
        areaAttackMessage.setText("You have dealt " + monsterDefenseCheck + " damage to " + Monster.getMonsterName() + ". In return, " + Monster.getMonsterName() + " deals " + playerDefenseCheck + " damage to you.");
        
        lblPlayerHealth.setText("Health: " + Player.getCurrentVitality() + " / " + Player.getMaxVitality());
        lblEnemyHealth.setText("Health: " + Monster.getCurrentVitality() + " / " + Monster.getMaxVitality());
        
        // monster defeated
        if (Monster.getCurrentVitality() == 0) {
            areaAttackMessage.setText("You have defeated " + Monster.getMonsterName() + "! You recieve " + Monster.getDroppedEXP() + " experience points and " + Monster.getDroppedGold() + " gold. Continue to the next monster.");
            Player.setCurrentEXP(Player.getCurrentEXP() + Monster.getDroppedEXP());
            Player.setCurrentGold(Player.getCurrentGold() + Monster.getDroppedGold());
            
            btnAttack.setEnabled(false);
            btnHeal.setEnabled(false);
            btnContinue.setEnabled(true);
            
            Monster defeatedMonster = new Monster();
            defeatedMonster = null;
            
            
            // boss defeated
            if (count == 5) {
                btnAttack.setEnabled(false);
                btnHeal.setEnabled(false);
                btnReturn.setEnabled(true);
                btnContinue.setEnabled(false);
            
                areaAttackMessage.setText("You have defeated " + Monster.getMonsterName() + "! You recieve " + Monster.getDroppedEXP() + " experience points and " + Monster.getDroppedGold() + " gold. It's time to rest a while...");
                
                Monster defeatedBoss = new Monster();
                defeatedBoss = null;
                
                count = 0; 
            } else {
                count = count + 1;     
            } 
            
            // player level-up system
            if (Player.getCurrentEXP() >= 100){
                int vitalityIncrease =  3 + (int)(Math.random() * (8 - 3));
                int powerIncrease =  1 + (int)(Math.random() * (3 - 1));
                int defenseIncrease =  0 + (int)(Math.random() * (2 - 0));
                
                JOptionPane.showMessageDialog(null, "You have leveled up! Your level increased by 1, vitality increased by " + vitalityIncrease + ", power increased by " + powerIncrease + ", and defense increased by " + defenseIncrease + "!");
                
                Player.setLevel(Player.getLevel() + 1);
                Player.setMaxVitality(Player.getMaxVitality() + vitalityIncrease);
                Player.setPower(Player.getPower() + powerIncrease);
                Player.setDefense(Player.getDefense() + defenseIncrease);
                
                Player.setCurrentVitality(Player.getMaxVitality());
                prgPlayerHealth.setValue(Player.getCurrentVitality());
                lblPlayerHealth.setText("Health: " + Player.getCurrentVitality() + " / " + Player.getMaxVitality());
                
                Player.setCurrentEXP(Player.getCurrentEXP() - 100);
            }
        }
        
        // player defeated
        if (Player.getCurrentVitality() == 0) {
            JOptionPane.showMessageDialog(null, "You have been defeated!");
            
            Player.setCurrentVitality(Player.getMaxVitality());
            
            GameOverScreen GameOverScreen = new GameOverScreen();
            GameOverScreen.show();
            this.dispose();
        }
    }//GEN-LAST:event_btnAttackActionPerformed

    private void btnContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContinueActionPerformed
        // re-initializes the battle
        btnStartBattle.setEnabled(true);  
    }//GEN-LAST:event_btnContinueActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // completes a stage and brings player back to main menu
        Player.setBossCount(Player.getBossCount() + 1);
        
        Player.setCurrentVitality(Player.getMaxVitality());
        
        MainMenu MainMenuScreen = new MainMenu();
        MainMenuScreen.show();
        this.dispose();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnHealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHealActionPerformed
        // allows player to use potions
        if (rdPotion.isSelected()) {
            if (Player.getPotionsHeld() > 0) {
                Player.setCurrentVitality(Player.getCurrentVitality() + 20);
                
                Player.setPotionsHeld(Player.getPotionsHeld() - 1);
                
                if (Player.getCurrentVitality() > Player.getMaxVitality()) {
                    Player.setCurrentVitality(Player.getMaxVitality());
                }
                
                prgPlayerHealth.setValue(Player.getCurrentVitality());
                lblPlayerHealth.setText("Health: " + Player.getCurrentVitality() + " / " + Player.getMaxVitality());
                lblPotionsHeld.setText("Held: " + Player.getPotionsHeld());
                
                areaAttackMessage.setText("Your potion heals you for 20 health points.");
                
                btnHeal.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null, "You have no more potions left!");
            }
        }
        
        if (rdMegaPotion.isSelected()) {
            if (Player.getMegaPotionsHeld() > 0) {
                Player.setCurrentVitality(Player.getCurrentVitality() + 50);
                
                Player.setMegaPotionsHeld(Player.getMegaPotionsHeld() - 1);
                
                if (Player.getCurrentVitality() > Player.getMaxVitality()) {
                    Player.setCurrentVitality(Player.getMaxVitality());
                }
                
                prgPlayerHealth.setValue(Player.getCurrentVitality());
                lblPlayerHealth.setText("Health: " + Player.getCurrentVitality() + " / " + Player.getMaxVitality());
                lblMegaPotionsHeld.setText("Held: " + Player.getMegaPotionsHeld());
                
                areaAttackMessage.setText("Your mega potion heals you for 50 health points.");
                
                btnHeal.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null, "You have no more mega potions left!");
            }
        }
        
        if (rdMaxPotion.isSelected()) {
            if (Player.getMaxPotionsHeld() > 0) {
                Player.setCurrentVitality(Player.getMaxVitality());
                
                Player.setMaxPotionsHeld(Player.getMaxPotionsHeld() - 1);
                
                if (Player.getCurrentVitality() > Player.getMaxVitality()) {
                    Player.setCurrentVitality(Player.getMaxVitality());
                }
                
                prgPlayerHealth.setValue(Player.getCurrentVitality());
                lblPlayerHealth.setText("Health: " + Player.getCurrentVitality() + " / " + Player.getMaxVitality());
                lblMaxPotionsHeld.setText("Held: " + Player.getMaxPotionsHeld());
                
                areaAttackMessage.setText("Your max potion fully heals you.");
                
                btnHeal.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null, "You have no more max potions left!");
            }
        }
    }//GEN-LAST:event_btnHealActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DungeonMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DungeonMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DungeonMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DungeonMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DungeonMenu().setVisible(true);
            }
        });
       
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaAttackMessage;
    private javax.swing.JButton btnAttack;
    private javax.swing.JButton btnCloseDungeon;
    private javax.swing.JButton btnContinue;
    private javax.swing.JButton btnHeal;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnStartBattle;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup grpPotionSelect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEnemyHealth;
    private javax.swing.JLabel lblEnemyName;
    private javax.swing.JLabel lblMaxPotionsHeld;
    private javax.swing.JLabel lblMegaPotionsHeld;
    private javax.swing.JLabel lblPlayerHealth;
    private javax.swing.JLabel lblPlayerName;
    private javax.swing.JLabel lblPotionsHeld;
    private static javax.swing.JProgressBar prgEnemyHealth;
    private static javax.swing.JProgressBar prgPlayerHealth;
    private javax.swing.JRadioButton rdMaxPotion;
    private javax.swing.JRadioButton rdMegaPotion;
    private javax.swing.JRadioButton rdPotion;
    // End of variables declaration//GEN-END:variables
}
